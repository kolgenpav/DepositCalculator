package ua.edu.znu.depositcalculator;

// Generated by Selenium IDE
import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class PrintSaveTest {

    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;

    @BeforeAll
    public static void setupClass() {
        WebDriverManager.chromedriver().setup();
    }

    @BeforeEach
    public void setUp() {
        driver = new ChromeDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
        driver.manage().window().maximize();
    }

    @AfterEach
    public void tearDown() {
        driver.quit();
    }

    public String waitForWindow(int timeout) {
        /*
        try {
            Thread.sleep(timeout);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
         */
        /*Implicit wait*/
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(timeout));

        Set<String> whNow = driver.getWindowHandles();
        Set<String> whThen = (Set<String>) vars.get("window_handles");
        if (whNow.size() > whThen.size()) {
            whNow.removeAll(whThen);
        }
        return whNow.iterator().next();
    }

    @Test
    public void printTest() {
        driver.get("https://fin-calc.org.ua/ua/deposit/calculate/");
        driver.findElement(By.id("submit")).click();
        vars.put("window_handles", driver.getWindowHandles());
        driver.findElement(By.cssSelector("p:nth-child(14) > a:nth-child(2)")).click();
        vars.put("win7346", waitForWindow(2000));
        driver.switchTo().window(vars.get("win7346").toString());
        assertEquals("Депозитний калькулятор. Розрахунок відсотків по депозиту", driver.getTitle());
    }

    @ParameterizedTest
    @CsvSource({
            "'p:nth-child(15) > a:nth-child(2)', calculation-on-deposit.xls",
            "'p:nth-child(16) > a:nth-child(2)', calculation-on-deposit.xlsx",
            "'p:nth-child(17) > a:nth-child(2)', calculation-on-deposit.html",
            "'p:nth-child(18) > a:nth-child(2)', calculation-on-deposit.csv",
            "'p:nth-child(19) > a:nth-child(2)', calculation-on-deposit.pdf"
    })
    public void SaveTest(String cssLocator, String filename) {
        Path downloadPath = Paths.get(System.getProperty("user.home"), "Downloads", filename);
        driver.get("https://fin-calc.org.ua/ua/deposit/calculate/");
        driver.findElement(By.id("submit")).click();
        vars.put("window_handles", driver.getWindowHandles());
        driver.findElement(By.cssSelector(cssLocator)).click();
        vars.put("win7346", waitForWindow(2000));
        driver.switchTo().window(vars.get("win7346").toString());
        assertTrue(Files.exists(downloadPath));
    }
}
